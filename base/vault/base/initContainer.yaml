# base/vault/base/deployments.yaml
# First deployment - handles initialization and unsealing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-init
  namespace: vault
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault-init
  template:
    metadata:
      labels:
        app: vault-init
    spec:
      serviceAccountName: vault-init
      initContainers:
      - name: wait-for-vault
        image: busybox
        command: ['sh', '-c', 'until wget -q --spider http://vault-0.vault-internal:8200/v1/sys/health || wget -q --spider http://vault.vault.svc:8200/v1/sys/health; do echo waiting for vault; sleep 2; done;']
      containers:
      - name: vault-init
        image: hashicorp/vault:1.13.3
        command: ["/bin/sh"]
        args: ["/scripts/init.sh"]
        env:
        - name: VAULT_ADDR
          value: "http://vault.vault.svc:8200"
        volumeMounts:
        - name: init-script
          mountPath: /scripts
          readOnly: true
      volumes:
      - name: init-script
        configMap:
          name: vault-init-script
          defaultMode: 0755
---
# Second deployment - handles configuration after initialization
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault-config
  namespace: vault
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault-config
  template:
    metadata:
      labels:
        app: vault-config
    spec:
      serviceAccountName: vault-auth
      initContainers:
      - name: wait-for-vault-init
        image: busybox
        command: ['sh', '-c', 'until kubectl get secret vault-token -n vault; do echo waiting for vault initialization; sleep 2; done;']
      - name: wait-for-vault
        image: busybox
        command: ['sh', '-c', 'until wget -q --spider http://vault.vault.svc:8200/v1/sys/health; do echo waiting for vault; sleep 2; done;']
      containers:
      - name: vault-config
        image: hashicorp/vault:1.13.3
        command: ["/bin/sh"]
        args: ["/scripts/configure.sh"]
        env:
        - name: VAULT_ADDR
          value: "http://vault.vault.svc:8200"
        - name: VAULT_TOKEN
          valueFrom:
            secretKeyRef:
              name: vault-token
              key: token
        volumeMounts:
        - name: config-script
          mountPath: /scripts
          readOnly: true
      volumes:
      - name: config-script
        configMap:
          name: vault-config-script
          defaultMode: 0755

---
# ConfigMap for initialization script
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-init-script
  namespace: vault
data:
  init.sh: |
    #!/bin/sh
    set -e

    # Check if Vault is initialized
    if ! vault status > /dev/null 2>&1; then
      echo "Initializing Vault..."
      INIT_OUTPUT=$(vault operator init)

      # Extract root token and create secret
      ROOT_TOKEN=$(echo "$INIT_OUTPUT" | grep 'Initial Root Token:' | awk '{print $NF}')
      kubectl -n vault create secret generic vault-token \
        --from-literal=token=$ROOT_TOKEN \
        --dry-run=client -o yaml | kubectl apply -f -

      # Save unseal keys
      UNSEAL_KEYS=$(echo "$INIT_OUTPUT" | grep 'Unseal Key' | awk '{print $NF}' | tr '\n' ' ')
      kubectl -n vault create secret generic vault-unseal-keys \
        --from-literal=keys="$UNSEAL_KEYS" \
        --dry-run=client -o yaml | kubectl apply -f -
    fi

    # Get unseal keys and unseal Vault
    UNSEAL_KEYS=$(kubectl get secret -n vault vault-unseal-keys -o jsonpath='{.data.keys}' | base64 -d)
    echo "$UNSEAL_KEYS" | tr ' ' '\n' | head -n 3 | while read key; do
      vault operator unseal $key
    done

    # Keep the pod running to monitor seal status
    while true; do
      sleep 30
      if vault status | grep -q 'Sealed.*true'; then
        echo "Vault is sealed, unsealing..."
        echo "$UNSEAL_KEYS" | tr ' ' '\n' | head -n 3 | while read key; do
          vault operator unseal $key
        done
      fi
    done

---
# ConfigMap for configuration script
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config-script
  namespace: vault
data:
  configure.sh: |
    #!/bin/sh
    set -e

    # Enable and configure Kubernetes auth
    vault auth enable kubernetes || true

    vault write auth/kubernetes/config \
      kubernetes_host="https://kubernetes.default.svc" \
      token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
      kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
      issuer="https://kubernetes.default.svc.cluster.local"

    # Create policies
    vault policy write oauth-policy - <<EOF
    path "kv/data/oauth2-proxy/*" {
      capabilities = ["read", "list"]
    }
    path "kv/metadata/oauth2-proxy/*" {
      capabilities = ["list"]
    }
    EOF

    # Create roles
    vault write auth/kubernetes/role/oauth2-proxy \
      bound_service_account_names=oauth2-proxy \
      bound_service_account_namespaces=oauth \
      policies=oauth-policy \
      ttl=1h

    # Enable secrets engines
    vault secrets enable -path=kv -version=2 kv || true

    # Keep container running
    tail -f /dev/null
